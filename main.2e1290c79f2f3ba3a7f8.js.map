{"version":3,"sources":["webpack:///./js/delay.js","webpack:///./js/toggleUserState.js","webpack:///./js/makeTransaction.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","reject","map","user","updatedUsers","table","makeTransaction","transaction","min","max","Math","floor","random","id","logSuccess","logError","warn","amount","catch"],"mappings":"2JAAMA,EAAQ,SAAAC,GACV,OAAO,IAAIC,SAAQ,SAACC,GAChBC,YAAW,WACPD,EAAQF,KACTA,OAILI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OACvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCCXXK,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGrBC,EAAkB,SAACC,EAAUC,GAC/B,OAAO,IAAIb,SAAQ,SAACC,EAASa,GAIzBb,EAHqBW,EAASG,KAAI,SAAAC,GAAI,OAClCA,EAAKP,OAASI,EAAd,iBAA8BG,EAA9B,CAAoCN,QAASM,EAAKN,SAAWM,UAOnEb,EAAS,SAAAc,GAAY,OAAIZ,QAAQa,MAAMD,IAW7CN,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GC3BnC,IAIMgB,EAAkB,SAACC,GACrB,IAL+BC,EAAKC,EAK9BxB,GALyBuB,EAKS,IALJC,EAKS,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAKpD,OAAO,IAAIrB,SAAQ,SAACC,EAASa,GACzBZ,YAAW,WACYqB,KAAKE,SAAW,GAG/BxB,EAAQ,CAAEyB,GAAIN,EAAYM,GAAItB,KAAMN,IAEpCgB,EAAOM,EAAYM,MAExB5B,OAIL6B,EAAa,SAAC,GAAiB,IAAfD,EAAe,EAAfA,GAAItB,EAAW,EAAXA,KACtBC,QAAQC,IAAR,eAA2BoB,EAA3B,iBAA8CtB,EAA9C,OAGEwB,EAAW,SAAAF,GACbrB,QAAQwB,KAAR,gCAA6CH,EAA7C,8BAIJP,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAC7BvB,KAAKoB,GACLI,MAAMH,GAEXT,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAC7BvB,KAAKoB,GACLI,MAAMH,GAEXT,EAAgB,CAAEO,GAAI,GAAII,OAAQ,KAC7BvB,KAAKoB,GACLI,MAAMH,GAEXT,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAC7BvB,KAAKoB,GACLI,MAAMH,K","file":"main.2e1290c79f2f3ba3a7f8.js","sourcesContent":["const delay = ms => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(() => {\r\n            resolve(ms);\r\n        }, ms);\r\n    });\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms","const users = [\r\n    { name: 'Mango', active: true },\r\n    { name: 'Poly', active: false },\r\n    { name: 'Ajax', active: true },\r\n    { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n    return new Promise((resolve, reject) => {\r\n        const updatedUsers = allUsers.map(user =>\r\n            user.name === userName ? { ...user, active: !user.active } : user,\r\n        );\r\n        resolve(updatedUsers);\r\n    });\r\n\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\n/*\r\n * Сейчас работает так\r\n */\r\n//   toggleUserState(users, 'Mango', logger);\r\n//   toggleUserState(users, 'Lux', logger);\r\n\r\n/*\r\n * Должно работать так\r\n */\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);","\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = (transaction) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n    return new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n            const canProcess = Math.random() > 0.3;\r\n\r\n            if (canProcess) {\r\n                resolve({ id: transaction.id, time: delay });\r\n            } else {\r\n                reject(transaction.id);\r\n            }\r\n        }, delay);\r\n    });\r\n};\r\n\r\nconst logSuccess = ({ id, time }) => {\r\n    console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n\r\nmakeTransaction({ id: 70, amount: 150 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n    .then(logSuccess)\r\n    .catch(logError);"],"sourceRoot":""}